<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pocopoco_vplay.board.model.mapper.BoardMapper">
	<select id="selectCategory" resultType="map">
		SELECT content.views,content.content_no,content.content_title,TO_CHAR(content.content_detail) as content_detail, menu.menu_name, likes.user_no as likesUser,
		(select count(*) from likes l2 where l2.content_no = content.content_no) as like_count
		FROM content
		left JOIN board ON content.content_no = board.content_no
		left JOIN content_category on content.content_no = content_category.content_no
		left join category on content_category.category_no = category.category_no
		left JOIN menu ON category.menu_no = menu.menu_no
		left JOIN likes ON content.content_no = likes.content_no
		WHERE board.board_type is null and likes.user_no=#{userNo} and menu_name is not null
		<if test="menu != 'All'">
			AND menu.menu_name =#{menu}
		</if>
		<if test="sort == 'newest'">
			order by content.create_date
		</if>
		<if test="sort == 'mostView'">
			order by content.views desc
		</if>
	</select>

	<select id="selectCategoryMyProjects">
		SELECT c.*,
		(SELECT COUNT(*) FROM likes WHERE likes.content_no = c.content_no) AS like_count
		FROM content c
		left JOIN board b ON c.content_no = b.content_no
		left JOIN content_category cc on c.content_no = cc.content_no
		left join category ccc on cc.category_no = ccc.category_no
		left JOIN menu m ON ccc.menu_no = m.menu_no
		WHERE c.user_no =3 and b.board_type is null and m.menu_name is not null and c.content_status='Y'
		<if test="menu != 'All'">
			AND m.menu_name =#{menu}
		</if>
		<if test="sort == 'newest'">
			order by c.create_date
		</if>
		<if test="sort == 'mostView'">
			order by c.views desc
		</if>
	</select>

	<update id="throwBoardTrash">
		update content set content_status ='N' where content_no=#{contentNo}
	</update>

	<select id="selectMyTrash">
		select c.*,(SELECT COUNT(*) FROM likes WHERE likes.content_no = c.content_no) AS like_count , b.board_type,m.menu_name
		from content c
		left join board b on c.content_no = b.content_no
		left JOIN content_category cc on c.content_no = cc.content_no
		left join category ccc on cc.category_no = ccc.category_no
		left JOIN menu m ON ccc.menu_no = m.menu_no
		where c.user_no=#{userNo} and b.board_type is null and m.menu_name is not null and c.content_status='N'
	</select>

	<select id="selectCategoryMyTrash">
		SELECT c.*,
		(SELECT COUNT(*) FROM likes WHERE likes.content_no = c.content_no) AS like_count
		FROM content c
		left JOIN board b ON c.content_no = b.content_no
		left JOIN content_category cc on c.content_no = cc.content_no
		left join category ccc on cc.category_no = ccc.category_no
		left JOIN menu m ON ccc.menu_no = m.menu_no
		WHERE c.user_no =3 and b.board_type is null and m.menu_name is not null and c.content_status='N'
		<if test="menu != 'All'">
			AND m.menu_name =#{menu}
		</if>
		<if test="sort == 'newest'">
			order by c.create_date
		</if>
		<if test="sort == 'mostView'">
			order by c.views desc
		</if>
	</select>

	<select id="allTemplateList" parameterType="string">
		select *
		from (select cg.category_name, c.content_no, c.content_title, u.user_nickname, (select count(*) from likes lk where lk.content_no = c.content_no) as like_count
		from content c
		left join users u on(c.user_no = u.user_no)
		left join board b on(c.content_no = b.content_no)
		left join content_category cc on(c.content_no = cc.content_no)
		left join category cg on(cc.category_no = cg.category_no)
		left join menu m on(cg.menu_no = m.menu_no)
		left join likes lk2 on (c.content_no = lk2.content_no)
		where b.board_type is null and m.menu_name = #{menuName}
		<if test="categoryArray != null">
			and cg.category_name in 
			<foreach item="category" collection="categoryArray" open="(" separator="," close=")">
				#{category}
			</foreach>
		</if>
		<if test="search != null">
			and CONTENT_TITLE like '%${search}%'
		</if>
		group by cg.category_name, c.content_no, c.content_title, u.user_nickname
		order by c.content_no desc)
		<if test="menuNameNum == 'video Templates'">
			where rownum <![CDATA[<]]>=
			3
		</if>
		<if test="menuNameNum == 'Music'">
			where rownum <![CDATA[<]]>=
			6
		</if>
		<if test="menuNameNum == 'Sound Effects'">
			where rownum <![CDATA[<]]>=
			5
		</if>
		<if test="menuNameNum == 'Graphic Templates'">
			where rownum <![CDATA[<]]>=
			3
		</if>
		<if test="menuNameNum == 'Stock Video'">
			where rownum <![CDATA[<]]>=
			3
		</if>
		<if test="menuNameNum == 'Photos'">
			where rownum <![CDATA[<]]>=
			3
		</if>
		<if test="menuNameNum == 'Fonts'">
			where rownum <![CDATA[<]]>=
			5
		</if>
	</select>

	<select id="menuLikeTo">
		select count(*)
		from likes
		where user_no = #{userNo} and content_no = #{contentNo}
		order by content_no desc
	</select>

	<select id="selectMyInquiry">
		SELECT *
		FROM content
		JOIN board USING(content_no)
		WHERE board_type = 1
		AND user_no = #{userNo}
		AND content_status = 'Y'
		ORDER BY create_date DESC
	</select>

	<select id="selectMyCommission">
		SELECT *
		FROM content
		JOIN board USING(content_no)
		WHERE board_type = 2
		AND user_no = #{userNo}
		AND content_status = 'Y'
		ORDER BY create_date DESC
	</select>

	<insert id="insertInquiry" parameterType="Content">
		<selectKey resultType="int" keyProperty="contentNo" order="BEFORE">
			SELECT VPLAY.CONTENT_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO CONTENT (
		CONTENT_NO,USER_NO,
		CONTENT_TITLE,
		CONTENT_DETAIL,
		CREATE_DATE,
		MODIFY_DATE,
		CONTENT_STATUS,
		VIEWS
		) VALUES (
		#{contentNo},
		#{userNo},
		#{contentTitle},
		#{contentDetail},
		SYSDATE,
		SYSDATE,
		'Y',
		0
		)
	</insert>

	<insert id="insertBoard">
		INSERT INTO BOARD (
		CONTENT_NO,
		BOARD_TYPE,
		MENU_NO
		) VALUES (
		#{contentNo},
		1,
		#{menuNo}
		)
	</insert>

	<update id="updateInquiry" parameterType="Content">
		UPDATE CONTENT
		SET
		CONTENT_TITLE = #{contentTitle},
		CONTENT_DETAIL = #{contentDetail},
		MODIFY_DATE = SYSDATE
		WHERE
		CONTENT_NO = #{contentNo}
	</update>

	<update id="updateBoard">
		UPDATE BOARD
		SET
		MENU_NO = #{menuNo}
		WHERE
		CONTENT_NO = #{contentNo}

	</update>

	<select id="selectInquiry" resultType="Content">
		SELECT
		C.CONTENT_NO,
		C.USER_NO,
		C.CONTENT_TITLE,
		C.CONTENT_DETAIL,
		C.CREATE_DATE,
		C.MODIFY_DATE,
		C.CONTENT_STATUS,
		C.VIEWS,
		B.MENU_NO
		FROM
		CONTENT C
		JOIN
		BOARD B ON C.CONTENT_NO = B.CONTENT_NO
		WHERE
		C.CONTENT_NO = #{contentNo}
	</select>

	<select id="selectReply">
		SELECT REPLY_DETAIL
		FROM REPLY
		WHERE CONTENT_NO = #{contentNo}
	</select>

	<select id="countReply">
		SELECT count(*)
		FROM REPLY
		WHERE CONTENT_NO = #{contentNo}
	</select>

	<select id="allCategory">
		select *
		from category
		where menu_no = #{menuNo}
	</select>

	<!-- 일단은 기본 쿼리랑 동일 -->
	<select id="allPopularCate">
		select *
		from category
		where menu_no = #{menuNo}
	</select>

	<select id="getrequestPostCount">
		select count(*)
		from content
		join board using(content_no)
		where board_type = 2
		<if test="menuNo != null">
		and menu_no = #{menuNo}
		</if>
	</select>

	<select id="selectAllRequestPost">
		select *
		from content
		join board using(content_no)
		join menu using(menu_no)
		join users using(user_no)
		where board_type = 2 and CONTENT_STATUS = 'Y'
		<if test="menuNo != null">
		and menu_no = #{menuNo}
		</if>
		<if test="search != null">
		and content_title like '%${search}%'
		</if>
		order by content_no desc
	</select>

	<select id="selectUser">
		select user_id
		from users
		where user_no = #{userNo}
	</select>

	<insert id="insertRequest">
		<selectKey resultType="_int" keyProperty="contentNo" order="BEFORE">
			SELECT VPLAY.CONTENT_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO content (content_no, content_title, content_detail, create_date, modify_date, content_status, delete_status, user_no, views)
		VALUES (#{contentNo}, #{contentTitle}, #{contentDetail}, SYSDATE, SYSDATE, DEFAULT, DEFAULT, #{userNo}, DEFAULT)
	</insert>

	<insert id="insertRequestBoard">
		insert into board (CONTENT_NO, BOARD_TYPE, MENU_NO)
		values (#{contentNo}, 2, #{menuNo})
	</insert>

	<select id="selectRequest">
		select *
		from content
		left join users using(user_no)
		left join board using(content_no)
		left join menu using(menu_no)
		left join content_category using(content_no)
		left join category using(CATEGORY_NO)
		where content_status ='Y' and content_no =#{bId}
	</select>

	<update id="updateCount">
		update content
		set views = views+1
		where content_no = #{bId}
	</update>

	<select id="allMenuDetail" parameterType="int">
		select c.content_no, c.content_title, to_char(c.content_detail) as content_detail, c.create_date,
		c.modify_date, c.content_status, u.user_no, u.user_id,
		u.user_nickname, u.user_email,u.user_profile, listagg(category_name, ',') within group(order by category_name) as category_name, m.menu_name
		from content c
		join users u on(c.user_no = u.user_no)
		join content_category cc on(c.content_no = cc.content_no)
		join category cg on(cc.category_no = cg.category_no)
		join menu m on(cg.menu_no = m.menu_no)
		where c.content_no = #{contentNo}
		group by
		c.content_no,
		c.content_title,
		to_char(c.content_detail),
		c.create_date,
		c.modify_date,
		c.content_status,
		u.user_no,
		u.user_id,
		u.user_nickname,
		u.user_email,
		u.user_profile,
		m.menu_name
	</select>

	<select id="selectReplyList">
		select *
		from reply
		join content using(content_no)
		join users using(user_no)
		where content_no = #{bId} and reply_status ='Y'
		order by reply_no desc
	</select>

	<insert id="allTempLike">
		insert into likes
		values(#{userNo},#{contentNo})
	</insert>

	<delete id="unAllTempLike">
		delete from likes
		where user_no = #{userNo} and content_no = #{contentNo}
	</delete>

	<update id="updateRequest">
		UPDATE content
		SET content_title = #{contentTitle},
		modify_date = SYSDATE,
		content_detail = #{contentDetail}
		WHERE content_no = #{contentNo}
	</update>

	<update id="updateRequestMenu">
		update board
		set menu_no = #{menuNo}
		where content_no = #{contentNo}
	</update>

	<update id="deleteBoard">
		update content
		set content_status = 'N'
		where content_no =#{bId}
	</update>

	

	<select id="selectContentTop">
	    SELECT 
	    c.content_no, 
	    c.content_title, 
	    c.create_date, 
	    c.modify_date, 
	    c.user_no, 
	    c.views, 
	    u.user_nickname,
	    COUNT(l.content_no) AS like_count
		FROM content c
		JOIN users u ON c.user_no = u.user_no 
		LEFT JOIN likes l ON c.content_no = l.content_no 
		GROUP BY c.content_no, c.content_title, c.create_date, 
        c.modify_date, c.user_no, c.views, u.user_nickname
		ORDER BY c.views DESC
		fetch first 12 rows only
	</select>	


	<select id="selectOrderByViews">
	    select * from content order by views desc
	    fetch first 12 rows only 
	</select>	
  
	<insert id="insertReply">
		insert into reply
		values(REPLY_SEQ.nextval, #{writer}, #{replyDetail}, sysdate, sysdate, default, #{contentNo})
	</insert>


	<update id="updateReply">
		update reply
		set reply_detail =#{replyDetail} where reply_no =#{replyNo}
	</update>

	<delete id="deleteReply">
		delete from reply
		where reply_no =#{replyNo}
	</delete>

	<select id="selectRequestList">
		select * from content
		  join board using(content_no)
		  join menu using(menu_no)
		  join users using(user_no)
		where menu_no =#{menuNo} and CONTENT_STATUS ='Y'
	</select>
  
	<select id="searchRequest">
		SELECT *
		FROM content
		JOIN users USING(user_no)
		join board using(content_no)
		join menu using(menu_no)
		<if test="searchValue != null and searchValue.trim() != ''">
		WHERE content_title LIKE CONCAT(CONCAT('%', #{searchValue}), '%') and board_type = 2 and CONTENT_STATUS = 'Y'
		</if>
	</select>
</mapper>